name: 'test-integration'

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: true
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: choice
        required: true
        options:
          - development
          - test-env





jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      contents: 'read'
      id-token: 'write'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v0
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_ID }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}
        token_format: 'access_token'
        access_token_lifetime: 300s

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      #with:
        #credentials_json: ${{ secrets.GCP_CREDENTIALS}}
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./test-integration

    # Checks that all Terraform configuration files adhere to a canonical format
   # - name: Terraform Format
   #   run: terraform fmt -check
   #   working-directory: ./sourcedataproduct-sapbw-stockonline/sourcedataproduct-sapbw-stockonline/infra

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./test-integration

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
     #if: github.ref == 'refs/heads/"main"'
      run: terraform apply -auto-approve -input=false
      working-directory: ./test-integration
      
      
    - name: copy to gcs
      run: gsutil cp * gs://azuresanthu
